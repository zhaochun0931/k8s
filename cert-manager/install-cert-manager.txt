kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.yaml





By default, cert-manager will be installed into the cert-manager namespace.



kubectl get pods --namespace cert-manager

$ kubectl get pods --namespace cert-manager
NAME                                     READY   STATUS    RESTARTS   AGE
cert-manager-6fd987499c-bzmv7            1/1     Running   0          22s
cert-manager-cainjector-5b94bd6f-bdsb8   1/1     Running   0          22s
cert-manager-webhook-575479ff47-jbwc5    1/1     Running   0          22s
$

You should see the cert-manager, cert-manager-cainjector, and cert-manager-webhook pods in a Running state. The webhook might take a little longer to successfully provision than the others.














The first thing you'll need to configure after you've installed cert-manager is an Issuer or a ClusterIssuer. 
These are resources that represent certificate authorities (CAs) able to sign certificates in response to certificate signing requests.



Create a Self-Signed Issuer
Create a Certificate Resource





kubectl apply -f issuer.yml
kubectl apply -f clusterissuer.yml
kubectl apply -f certificate.yml


kubectl get issuer
kubectl get clusterissuer
kubectl get secret
kubectl get cert






$ kubectl get secret
NAME            TYPE                DATA   AGE
my-tls-secret   kubernetes.io/tls   3      12s
$ kubectl get secret -o yaml
apiVersion: v1
items:
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lSQUtyT0l0bWwrOTBLOTFtQlRCM09KSjh3RFFZSktvWklodmNOQVFFTEJRQXcKQURBZUZ3MHlOVEEwTURjd09ETXdOREJhRncweU5UQTNNRFl3T0RNd05EQmFNQUF3Z2dFaU1BMEdDU3FHU0liMwpEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURNcmZNbXpSVXUya24ybWYxSzRob1d0eEhkUjROOThIekJSYVJGCmRUWnJGalM0S3ZWWEVQcUJmNkdtQS9XWmtwcDZoTFZ1czBZZHhFeVlkVGtoeWhWaVRkTzN6R0JmMkpoL05yc2QKa2gvamlueVFOa3QwOTgxd3RuRFdOdnM0VXlJYmV1TEJUN0N4QlZxUlc5MHozWjZOaTdYQkV5YS9hQWE4RmZicAo3TXJYT1ZGQVNERGhOWXk0UTJZN2NCd0hOYXY1cjdaUk5GR1d3eWNxL1JtVW0yTU5UR01qRWFXVklaaDhmaE4yClpwVE5ka3R5WjJsSUsxY1pOR3ltci90VWVZSE1OUVFpUHEvRGQ0cDY4blM2VmEzMmFnYmxjT25IMmxyUmg2aHIKaVZCM0x1N1VlU2d0Z3c3TDE2ZHh5V3hNeXBabmFuaS9XNUFLMklGRmhDTSthcGdwQWdNQkFBR2phVEJuTUE0RwpBMVVkRHdFQi93UUVBd0lGb0RBTUJnTlZIUk1CQWY4RUFqQUFNRWNHQTFVZEVRRUIvd1E5TUR1Q0MyVjRZVzF3CmJHVXVZMjl0Z2c5M2QzY3VaWGhoYlhCc1pTNWpiMjJDR3lvdVpHVm1ZWFZzZEM1emRtTXVZMngxYzNSbGNpNXMKYjJOaGJEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFvWDg4RHNmb1I2Zm5zSUF4d1c4cUtTdWdOTUErUUFEdApRbEIzR3ZJdFRuV2d6d3Fwd2UxN2RJTHJuR25yZmZtZ2gwMzQwMWNJZmE1MlNJVWFxcTRPMGhmZVNXWXArWmwrCkxSK1Njd1EzaDVwbkJ1eTRVS1pIQUdNVWxDVlZ1cFZDUXdFeEJNdTF4K1AzbCtqcHN3Kzg1U3I0c3lmNFhMaFcKaUUydFFSY0RNWi9idzJib3dVaElpNXlpSzVMUDZhZ2thcXA2a3JZVm8zM0ZwcFVtTGpwdzRDU2hGREVBam1RRApodDRTbDJYaHpURnRJZW8zUlpoQ1p1V0VhdFM2ZjdTVWlSS2JzaGJ1MEFkemlreVlYZ0lCMU1QRllPWEY3MkE0CktQWS90MU9OT1ZGb2FwZUZrcjY2L3dQT21mdHdDRFlhS2ZQeGxtUFhrOG9aVEtjMmIvZGc2Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lSQUtyT0l0bWwrOTBLOTFtQlRCM09KSjh3RFFZSktvWklodmNOQVFFTEJRQXcKQURBZUZ3MHlOVEEwTURjd09ETXdOREJhRncweU5UQTNNRFl3T0RNd05EQmFNQUF3Z2dFaU1BMEdDU3FHU0liMwpEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURNcmZNbXpSVXUya24ybWYxSzRob1d0eEhkUjROOThIekJSYVJGCmRUWnJGalM0S3ZWWEVQcUJmNkdtQS9XWmtwcDZoTFZ1czBZZHhFeVlkVGtoeWhWaVRkTzN6R0JmMkpoL05yc2QKa2gvamlueVFOa3QwOTgxd3RuRFdOdnM0VXlJYmV1TEJUN0N4QlZxUlc5MHozWjZOaTdYQkV5YS9hQWE4RmZicAo3TXJYT1ZGQVNERGhOWXk0UTJZN2NCd0hOYXY1cjdaUk5GR1d3eWNxL1JtVW0yTU5UR01qRWFXVklaaDhmaE4yClpwVE5ka3R5WjJsSUsxY1pOR3ltci90VWVZSE1OUVFpUHEvRGQ0cDY4blM2VmEzMmFnYmxjT25IMmxyUmg2aHIKaVZCM0x1N1VlU2d0Z3c3TDE2ZHh5V3hNeXBabmFuaS9XNUFLMklGRmhDTSthcGdwQWdNQkFBR2phVEJuTUE0RwpBMVVkRHdFQi93UUVBd0lGb0RBTUJnTlZIUk1CQWY4RUFqQUFNRWNHQTFVZEVRRUIvd1E5TUR1Q0MyVjRZVzF3CmJHVXVZMjl0Z2c5M2QzY3VaWGhoYlhCc1pTNWpiMjJDR3lvdVpHVm1ZWFZzZEM1emRtTXVZMngxYzNSbGNpNXMKYjJOaGJEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFvWDg4RHNmb1I2Zm5zSUF4d1c4cUtTdWdOTUErUUFEdApRbEIzR3ZJdFRuV2d6d3Fwd2UxN2RJTHJuR25yZmZtZ2gwMzQwMWNJZmE1MlNJVWFxcTRPMGhmZVNXWXArWmwrCkxSK1Njd1EzaDVwbkJ1eTRVS1pIQUdNVWxDVlZ1cFZDUXdFeEJNdTF4K1AzbCtqcHN3Kzg1U3I0c3lmNFhMaFcKaUUydFFSY0RNWi9idzJib3dVaElpNXlpSzVMUDZhZ2thcXA2a3JZVm8zM0ZwcFVtTGpwdzRDU2hGREVBam1RRApodDRTbDJYaHpURnRJZW8zUlpoQ1p1V0VhdFM2ZjdTVWlSS2JzaGJ1MEFkemlreVlYZ0lCMU1QRllPWEY3MkE0CktQWS90MU9OT1ZGb2FwZUZrcjY2L3dQT21mdHdDRFlhS2ZQeGxtUFhrOG9aVEtjMmIvZGc2Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBekszekpzMFZMdHBKOXBuOVN1SWFGcmNSM1VlRGZmQjh3VVdrUlhVMmF4WTB1Q3IxClZ4RDZnWCtocGdQMW1aS2Flb1MxYnJOR0hjUk1tSFU1SWNvVllrM1R0OHhnWDlpWWZ6YTdIWklmNDRwOGtEWkwKZFBmTmNMWncxamI3T0ZNaUczcml3VSt3c1FWYWtWdmRNOTJlall1MXdSTW12MmdHdkJYMjZleksxemxSUUVndwo0VFdNdUVObU8zQWNCeldyK2ErMlVUUlJsc01uS3YwWmxKdGpEVXhqSXhHbGxTR1lmSDRUZG1hVXpYWkxjbWRwClNDdFhHVFJzcHEvN1ZIbUJ6RFVFSWo2dnczZUtldkowdWxXdDltb0c1WERweDlwYTBZZW9hNGxRZHk3dTFIa28KTFlNT3k5ZW5jY2xzVE1xV1oycDR2MXVRQ3RpQlJZUWpQbXFZS1FJREFRQUJBb0lCQUZtbnZJRjdoZExmRlZUcQp3UE9qTkxCTWdvdTkvcEFVM21DK2c2VlZJWUFvMnZEdENFaWFERkRiT2xDQkhYeW1wZm9TMVhKbkhzaDlLdHdCClJRUlRBNmpxMUZtSE1aUHFTV28zN0NDWTJGVVFYVjNDR3ExaXVsK3IycU5LdENKSThBQy9oRUlQQ1NPUlo4bVMKUnNPb1NRSlJkMHphZWJlUDlwcyt0OGhoeTd3WCt5dTI0QzdkNHVIMU9OZkVUV29Wc2ptQzNiZHlhMWhUbUZRTgpxOWd1eFF2Ym5VMytlWGE4VGFhMlJrWEJrQnhKeVg5bGpyTlJhNHN1SUk5YTRBSVdrMU9kWEgvdkhEZE9WVEhOCk90NUlSbVEyMHlyUDhpRllWZDUwMkE3elJnSW1Ka0M1TUdNQ2NJSFpxNTkxbDlVbnBVenhRYWNmS1ZWV1pmQkQKa0JJekdRRUNnWUVBOXdYNUI1WDFUSHJxdmpmWWFLaXg1UE5qbG5Rb0RoRktmRFpOdG9KKzR1K0RPeWsyMUd1TgpZbVpYeExhZ0o0Q0FyNk9pL3FtY1IzbHpUQjUxWnNlbnh4MlpEZHRKd0pRa3J1SFExdzIzaTZ4RDRUQ0w4TUFPCnB4eGNKZmZKM25ITk5rNDYvSzQvQmh2UlVOZDYwTGdWMExESGZ4Y1Q5M3FTUTk1TWFlTzdIV0VDZ1lFQTFCNE8KdmFqblpiallyaTBlOW1abG9nWDFLb1J1Z0xuSWRSaWJCUmowWXZ4UDBoZmZwNzh2SW9ET1NrbzkwWEJLelJwZQo4eitUVXkzWHd6SUNQbmZOMGRBV3lNYkpUc0xLWUloc3VUNUNsRGUyMTU0Z1pwY3QxSTJxeThpNi9LYk82ZzNwCm5zOVpIcUdsMm9lajhvZlRJZ3E1dGNOOU8xVnBQNHZrUXF1KzU4a0NnWUFXSXZuakhTUWpXMnlINlZkQ1ljTzMKWWJ4TjhsRFltZUlUNllYalVpUnV6OG54MWtxc2xJclNBNXZmN0FIRUtIYmZ4b2xIeXdsUE9tb0RxME1ZRjlKSQpQTFhIa1J3MTN0Qyt2MHZJeWRqbDhtVU8zQnZlVWtlOTRBTzkvMHVlM0pIb1NQQnVUbXNsYi82OUFPSm5xK2VBCmtTYi9rNkRkYjZXRjRYajFrRXZuWVFLQmdBMGhnellZYzZLbmE3cDBqcHNnUWFCakVBYyt4WHh3ZzhsRDZheksKRzY3WkFiUDJ5R0NoQkREMW1rK2RBdkNwSytoQWZxbytRRWVBNmY5cVpCc3IzWERrbWRSNkFkSS9Xcm5aR0NucgpnY0dkSlZONXRYWEVYQkR4YUNaUFdjdjBJNUQzcFlPd1FFc1dKS2MvaUZXbU5OckJvVGR3VDV0UnNUOCswTFdUCjNqQ0pBb0dBS1VkZitmSkRXZnBWeCtWL1p3NmdCa1dWVGhLa1JzbXZpWWF4ZU9EaEY0bHdXRVdKSkVwK0RQTXkKbWRvWmMzZUR3b2pUbUkyR0ZJc25QRi9tZjgvdlZuRDU1ejJwWjRHMzE1S2Rndnh0S2hmUXR0UVNUMEQvay9rNAppeE9hRFZ2RUNLS0szdHFGMWJxZVpKb2l2SVhIZkxNaFVhU2Q4YTJlNEVSSS9SMm93V1k9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/alt-names: example.com,www.example.com,*.default.svc.cluster.local
      cert-manager.io/certificate-name: my-selfsigned-ca
      cert-manager.io/common-name: ""
      cert-manager.io/ip-sans: ""
      cert-manager.io/issuer-group: ""
      cert-manager.io/issuer-kind: ""
      cert-manager.io/issuer-name: my-selfsigned-issuer
      cert-manager.io/uri-sans: ""
    creationTimestamp: "2025-04-07T08:30:40Z"
    labels:
      controller.cert-manager.io/fao: "true"
    name: my-tls-secret
    namespace: default
    resourceVersion: "731"
    uid: 1b678fe5-e1e3-4c2d-9548-0dea908bc606
  type: kubernetes.io/tls
kind: List
metadata:
  resourceVersion: ""
$








openssl x509 -in <(kubectl get secret root-secret -o jsonpath='{.data.tls\.crt}' | base64 -d) -text -noout







kubectl create configmap nginx-https-config --from-file=nginx-https.conf



