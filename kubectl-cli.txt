kubeadm config print init-defaults



kubectl api-versions

kubectl api-resources

kubectl api-resources --sort-by=name


kubectl api-resources --sort-by=kind




kubectl get crds



kubectl cluster-info
kubectl get --raw /apis
kubectl get --raw /apis | jq


kubectl get all -A


# namespace
# In a Kubernetes cluster, namespaces provide a way to partition resources and isolate workloads. 
# They act as virtual clusters within a physical cluster, enabling multiple teams or projects to run independently. 
kubectl config set-context --current --namespace=<namespace-name>
kubectl config set-context --current --namespace=rabbitmq-system
kubectl config set-context --current --namespace=default














kubectl rollout restart statefulset xxx -n namespace
kubectl rollout status statefulset rabbitmq2-server -n rabbitmq-system





kubectl cordon node_name
kubectl uncordon node_name





kubectl apply -f xxx.yml --record






kubectl rollout history deployment xxx
kubectl rollout undo deployment xxx --to-revision=12
kubectl rollout status deployment xxx





kubectl get packagerepository
kubectl describe packagerepository xxx




#kubectl get ns
NAME              STATUS   AGE
default           Active   3m
kube-node-lease   Active   3m
kube-public       Active   3m
kube-system       Active   3m
#





# k8s cluster log
/var/log/pods


kubectl get apiservice




journalctl -u kubelet




kubectl expose rc replicationcontroller_name --name my-rc-svc --type=NodePort
kubectl expose rs replicateset_name --name my-rs-svc --type=NodePort




kubectl label pod kubia-545f5f4598-98gch app=kubia --overwrite










kubectl describe node

kubectl get events
kubeadm token create --print-join-command





kubectl get nodes
kubectl get pods -A





kubectl get pods --show-labels -A
kubectl get pods -l <label-key>=<label-value>


kubectl logs -l <label-key>=<label-value> -n namespace





kubectl logs -l app.kubernetes.io/instance=cert-manager -n cert-manager

kubectl logs -l app.kubernetes.io/instance=cert-manager -n cert-manager







kubectl patch <resource-type> <resource-name> --type=json -p='[{"op": "remove", "path": "/metadata/finalizers"}]'
kubectl patch users user-example -n rabbitmq-system --type=json -p='[{"op": "remove", "path": "/metadata/finalizers"}]'






