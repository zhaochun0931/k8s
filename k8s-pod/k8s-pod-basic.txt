Digging a bit deeper, a Pod is just a shared execution environment for one or more containers. More often than not, a Pod only has one container.


To deploy a Pod to a Kubernetes cluster we define it in a manifest file and then POST that manifest file to the API server. The master examines it, records it in the cluster store, and the scheduler deploys the Pod to a healthy node with enough available resources.


At the highest level, a Pod is a shared execution environment for one or more containers. “shared execution environment” means that all container in a Pod share the IP address, hostname, sockets, memory, volumes, and more, of the Pod they run inside of.

Each Pod creates its own network namespace - a single IP address, a single range of ports, and a single routing table. This is true even if the Pod is a multicontainer Pod - each container in a Pod shares the Pods IP, range of ports, and routing table.

At a high level, Control Groups (cgroups) are what stop individual containers from consuming all of the available CPU, RAM and IOPS on a node.







Pod lifecycle

The lifecycle of typical Pod goes something like this. You define it in a YAML or JSON manifest file. Then you throw that manifest at the API server and the Pod it defines gets scheduled to a healthy node. 
Once it’s scheduled to a node, it goes into the pending state while the node downloads images and fires up any containers. The Pod remains in this pending state until all of its resources are up and ready. Once everything’s up and ready, the Pod enters the running state.
Once it’s completed its task in life, it gets terminated and enters the succeeded state.
