kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.yaml





By default, cert-manager will be installed into the cert-manager namespace.
Once you've installed cert-manager, you can verify it is deployed correctly by checking the cert-manager namespace for running pods:


kubectl get pods --namespace cert-manager

$ kubectl get pods --namespace cert-manager
NAME                                     READY   STATUS    RESTARTS   AGE
cert-manager-6fd987499c-bzmv7            1/1     Running   0          22s
cert-manager-cainjector-5b94bd6f-bdsb8   1/1     Running   0          22s
cert-manager-webhook-575479ff47-jbwc5    1/1     Running   0          22s
$

You should see the cert-manager, cert-manager-cainjector, and cert-manager-webhook pods in a Running state. The webhook might take a little longer to successfully provision than the others.














The first thing you'll need to configure after you've installed cert-manager is an Issuer or a ClusterIssuer. 
These are resources that represent certificate authorities (CAs) able to sign certificates in response to certificate signing requests.






kubectl apply -f issuer.yml
kubectl apply -f clusterissuer.yml
kubectl apply -f certificate.yml


kubectl get issuer
kubectl get clusterissuer
kubectl get secret










openssl x509 -in <(kubectl get secret root-secret -o jsonpath='{.data.tls\.crt}' | base64 -d) -text -noout



