pod
|
|
|
replicaset
|
|
|
deployment










More often than not, you’re going to deploy your applications via Deployments rather than ReplicaSets. However, Deployments build on top of ReplicaSets.

One ReplicaSet can only manage one Pod type.




A ReplicaSet defines two important things:
The Pod template
The desired number of replicas




Desired state is what you want. Current state is what you’ve got. The aim-ofthe-game is for the two to match - current state should always match desired state.

A declarative model lets you describe your desired state without having to get into the detail of how to get there.

We’ve got two competing models. The declarative model and the imperative model.
Declarative models are all about describing the end-goal. Imperative models are all about lists of commands that will get you to an end goal.




Reconciliation loops

Fundamental to all of this, are background reconciliation loops.

ReplicaSets implement a background reconciliation loop that is constantly monitoring the cluster. It’s checking to see if current state matches desired state.
If it doesn’t, it wakes up the control-plane and Kubernetes takes steps to fix the situation.

To be crystal clear - Kubernetes is constantly striving for harmony between current state and desired state!




kubectl expose deployment helloapp1 --target-port=8080 --type=NodePort
